#+STARTUP: showall hidestars
#+TAGS: DOCS(d) CODING(c) TESTING(t) PLANING(p)
#+LINK_UP: sitemap.html
#+LINK_HOME: main.html
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+DESCRIPTION: Augment design process with system property discovering aid.
#+KEYWORDS: SmallCell, 
#+LANGUAGE: en

#+STYLE: <link rel="stylesheet" type="text/css" href="org-manual.css" />


#+AUTHOR:    Mirela Nicola
#+EMAIL:     mirela_nikola@yahoo.com
#+DATE:      2013-03-07 Thu

#+TITLE: FSM developing workflow

* Workflow

** Augment design process with system property discovering aid.

#+begin_src ditaa :file design_flow.png :cmdline  -s 0.8
  
  
  +---------+                            +----------------+
  | FSM V.0 |                            |   eunit_viz    |
  |{d}cBLU  +--------------------------->+     cGRE       |      +-----------------------+
  +----+----+                            +--+-------------+      |      bluefringe:      |
       |                                    ^       |      +---->+       eqc_fsm() cGRE  |
       |          +--------------+          |       |      |     +-----------+-----------+
       +--------->+    EUNIT     |          |       |      |                 |
                  |    c1CB      |     +----+       |      |                 |
       +--------->+ (Test Suite) |     |            |      |                 |
       |          +------+-------+     |            |      |                 |
       |                 |             |            |      |                 v     
       |            +----+             |            |      |   +-------------+---------------+
       |            |    |             |            |      |   | +------------------------+  |
  +----+------+     v    v     +-------+-------+    |      |   | |          << eqc_fsm >> |  |
  | FSM UT V.0|    NOK   OK    |     FSM_UT    |    |      |   | |                        |  |
  | {d}cBLU   +--------------->+      V.1      |    |      |   | |     $SUT_eqc.erl       |  |
  +-----------+                |   (pos,neg)   +----+------+   | |-add pre/post condition |  |
                               |   {d}cBLU     |    |          | |      cYEL              |  |
                               +---------------+    |          | +------------------------+  |
                                                    |          |  -rename state              |                         
                                       +------------+          |  {d}                        |             
                                       |            |          +----------------+------------+
                                       |            v                           | 
                                       |   +--------+-------+                   |
                                       |   | eunit_fsm.jpg  |                   v
                                       |   |     cGRE       |           +-------+------+
                                       |   +----------------+           |   eqc_fsm()  +----> $SUT_eqc.jpeg
                                       v                                |      cGRE    |    
                                      NOK                               +-------+------+
                                                                                | 
                                                                                v 

                                                                               NOK


       {API testing}             {Design proving}                  {Application testing}
#+end_src

#+results:
[[file:design_flow.png]]

 
   This provides feedback and guide developer from formal specification
   to the exact component design.

   Usage of examples
   make
   utest  (ut-shell)
   vztest
   eqctest
   eqcunit

*** Example: locker
**** Desc:  [[http://pdincau.wordpress.com/2010/09/07/an-introduction-to-gen_fsm-behaviour/][An introduction to gen_fsm behaviour]]
     The code is as always a simple example, it just identifies to
     machine states: ”unlocked” and ”locked”. Since we students can’t
     decide our own code, I will put in the internal state the pin
     code of the locker.

**** EUnit test (make utest)
     All 19 tests passed.

**** Grammar and state machine inference (make vztest)
     Trace:
#+begin_src shell
     %% + start stop start stop
     %% - stop
     %% - start start
     %% + start lock unlock lock stop
     %% + start lock stop
     %% - start unlock
     %% - start lock start
#+end_src
     
     [[file:locker_fsm.jpeg]]

**** QuickCheck FSM generator (make eqctest eqcunit)
     
     [[file:locker_eqc.jpg]]
     

*** Example: frequency
**** Desc: [[http://www.cs.kent.ac.uk/pubs/2010/3041/content.pdf][From Test Cases to FSMs]]
     As a running example we write tests for a simple server that 
     manages a number of resources – frequencies for example –
     which can each be allocated and deallocated.

**** EUnit test (make utest)
     One frequency: All 17 tests passed.
     Two frequencies: All 15 tests passed.
     

**** Grammar and state machine inference (make vztest)   
***** One frequency

      Trace:
#+begin_src shell
      %% + start stop start stop
      %% - stop
      %% - start start
      %% + start allocate deallocate allocate stop
      %% - start allocate allocate
      %% - deallocate
      %% - allocate
      %% + start allocate stop start
#+end_src      

      [[file:single_frequency_fsm.jpeg]]

**** QuickCheck FSM generator (make eqctest eqcunit)

     [[file:single_frequency_eqc.jpg]]

***** Two frequencies

      Trace:
#+begin_src shell
      %% + start stop start stop
      %% - stop
      %% - start start
      %% + start allocate allocate deallocate allocate
           deallocate deallocate stop
      %% - start allocate allocate allocate
      %% - allocate
      %% - deallocate
      %% + start allocate stop start
      %% + start allocate allocate stop start
      %% - start allocate deallocate deallocate
      %% - start allocate start
      %% - start allocate allocate start
#+end_src

      [[file:two_frequency_fsm.jpeg]]
      
**** QuickCheck FSM generator (make eqctest eqcunit)
     
     [[file:two_frequencies_eqc.jpg]]

*** Example: creature
**** Desc: [[http://proper.softlab.ntua.gr/Tutorials/PropEr_testing_of_finite_state_machines.html][PropEr testing of finite state machines]]
     Consider the following state diagram that describes the life of a
     strange creature that feeds on cheese, grapes and lettuce but
     never eats the same kind of food on two consecutive days.

**** EUnit test (make utest)
     All 34 tests passed.

**** Grammar and state machine inference (make vztest)    
     Trace:
#+begin_src shell
     %% + start stop start stop
     %% - stop
     %% + start new_day stop
     %% + start new_day stop
     %% + start lettuce stop
     %% + start grapes stop
     %% - start(cheese) new_day(cheese)
     %% - start(lettuce) new_day(lettuce) 
     %% - start(grapes) new_day(grapes)    
#+end_src

     [[file:creature_fsm.jpeg]]

**** QuickCheck FSM generator (make eqctest eqcunit)
     
     [[file:creature_eqc.jpg]]

*** Example: tradepost
    This example demonsteates how gramma inference can be used to
    navigate toward right design.

**** Desc: 
     The module implementing the tests of the Tradepost where seller
     interact with bayer. What the seller needs, is a way to insert an
     item, and a way to remove an item. Also to identify him/her self with
     a naive password approach. Once identified, the seller (and only the
     seller) should be able to add and retract items.

     

**** Version Zero
     
***** EUnit test (make utest)
      We use Unitary tests to test module public API.
#+begin_src erlang
     [
      % Initialy in pending state and no loop data
      ?_fsm_state(which_tp(), pending),
      ?_fsm_data(which_tp(), [undefined,undefined,undefined,undefined,undefined]),
      %% From Pending, identify seller, then state should be pending
      %% loopdata should now contain seller_password
      ?_fsm_test(which_tp(), "Identify seler Test",
		 [
		  {call, tradepost, seller_identify, [which_tp(), seller_password], ok},
		  {state, is, pending},
		  {loopdata, is, [undefined,undefined, seller_password, undefined,undefined]}
		 ]),
      ?_fsm_test(which_tp(), "Insert/Withdraw Test",
		 [
		  {call, tradepost, seller_identify, [which_tp(), seller_password], ok},
		  {state, is, pending},
		  {loopdata, is, [undefined,undefined, seller_password, undefined,undefined]},

		  {call, tradepost, seller_insertitem, [which_tp(), playstation, seller_password], ok},
		  {state, is, item_received},	% mfa
		  {loopdata, is, [playstation, undefined, seller_password, undefined,undefined]},
		  {call, tradepost, withdraw_item, [which_tp(), seller_password], ok},
		  {state, is, pending}
		 ])
     ]
#+end_src
      

***** Grammar and state machine inference (make vztest)    
      We can do 100% coverage of initial version using nine tests.
      Trace:
#+begin_src shell
 + start stop start stop
 - unregister stop
 - start start
 - identify
 + start identify stop
 - start insertitem
 + start identify insertitem withdraw insertitem
 - start identify insertitem withdraw withdraw 
#+end_src
      
      [[file:tracepost-v.0_fsm.jpeg]]


      This view is quite different from inplementation code which have
      only 3 states: start, pending, item_received. This is because
      state where saler identifies self if lurking in FSM context.
      
      Our next task is to make it explicit in Version 1.0
